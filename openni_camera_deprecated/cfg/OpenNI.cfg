#! /usr/bin/env python

PACKAGE='openni_camera_deprecated'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

output_mode_enum = gen.enum([  gen.const(  "SXGA_15Hz", int_t, 1, "1280x1024@15Hz"),
                               gen.const(   "VGA_30Hz", int_t, 2, "640x480@30Hz"),
                               gen.const(   "VGA_25Hz", int_t, 3, "640x480@25Hz"),
                               gen.const(  "QVGA_25Hz", int_t, 4, "320x240@25Hz"),
                               gen.const(  "QVGA_30Hz", int_t, 5, "320x240@30Hz"),
                               gen.const(  "QVGA_60Hz", int_t, 6, "320x240@60Hz"),
                               gen.const( "QQVGA_25Hz", int_t, 7, "160x120@25Hz"),
                               gen.const( "QQVGA_30Hz", int_t, 8, "160x120@30Hz"),
                               gen.const( "QQVGA_60Hz", int_t, 9, "160x120@60Hz")],
                               "output mode")

bayer_enum = gen.enum([gen.const("Bilinear", int_t, 0, "Fast debayering algorithm using bilinear interpolation"),
                       gen.const("EdgeAware", int_t, 1, "debayering algorithm using an edge-aware algorithm"),
                       gen.const("EdgeAwareWeighted", int_t, 2, "debayering algorithm using a weighted edge-aware algorithm")],
                                 "Bayer to RGB algorithm selection")

gen.add("image_mode", int_t, 0, "Image output mode for the color/grayscale image", 2, 1, 9, edit_method = output_mode_enum)
gen.add("debayering", int_t, 0, "Bayer to RGB algorithm", 0, 0, 2, edit_method = bayer_enum)

gen.add("depth_mode", int_t, 0, "depth output mode", 2, 2, 9, edit_method = output_mode_enum)
gen.add("depth_registration", bool_t, 0, "Depth data registration", False)

gen.add("depth_time_offset", double_t, 0, "depth image time offset in seconds", 0.0, -1.0, 1.0 );
gen.add("image_time_offset", double_t, 0, "image time offset in seconds", 0.0, -1.0, 1.0 );

exit(gen.generate(PACKAGE, "OpenNI", "OpenNI"))
